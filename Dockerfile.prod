FROM --platform=linux/amd64 python:3.11-buster as builder

RUN pip install poetry

ENV POETRY_NO_INTERACTION=1 \
    POETRY_VIRTUALENVS_IN_PROJECT=1 \
    POETRY_VIRTUALENVS_CREATE=1 \
    POETRY_CACHE_DIR=/tmp/poetry_cache

ENV AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} \
    AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} \
    AWS_REGION=${AWS_REGION}

WORKDIR /app

COPY pyproject.toml poetry.lock ./
RUN touch README.md

RUN python -m venv /app/.venv \
    && . /app/.venv/bin/activate \
    && poetry install --only main --without dev --no-root \
    && rm -rf $POETRY_CACHE_DIR

WORKDIR /app

FROM --platform=linux/amd64 python:3.11-slim-buster as certmaster

WORKDIR /app
COPY --from=builder /app/.venv /app/.venv
COPY pyproject.toml poetry.lock ./
COPY . .
RUN pip install poetry && poetry install && poetry run pybe generate-privkey

# The runtime image, used to just run the code provided its virtual environment
FROM --platform=linux/amd64 python:3.11-slim-buster as runtime

RUN apt-get update -yq && apt-get install -yq libpq-dev make

ENV VIRTUAL_ENV=/app/.venv \
    PATH="/app/.venv/bin:$PATH"

WORKDIR /app

COPY --from=builder ${VIRTUAL_ENV} ${VIRTUAL_ENV}
COPY --from=certmaster /app/certs ./certs

COPY . .
COPY alembic.ini ./app/alembic.ini
# I can't stand this next part... we'll have to figure it out

RUN python -m venv /app/.venv \
    && . /app/.venv/bin/activate \
    && python3 -m pip install poetry \
    && poetry install

ENV APP_PORT=80
ENV PRIVATE_KEY_PATH=/app/certs/private.key

# RUN ${VIRTUAL_ENV}/bin/poetry run pybe generate-privkey

# fastapi run src/main.py --port 80
CMD ["fastapi", "run", "src/main.py", "--port", "${APP_PORT}", "--host", "0.0.0.0"]
